2014-01-10 03:12:18,872   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 03:12:18,887   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 03:12:18,888   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 03:12:18,890   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,890   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,891   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,892   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 03:12:18,892   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 03:12:18,892   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 03:12:18,893   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 03:12:18,893   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 03:12:18,902   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 03:12:18,903   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 03:12:18,903   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 03:12:18,904   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,904   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 03:12:18,905   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,905   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 03:12:18,907   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 03:12:18,907   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 03:12:18,907   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 03:12:18,907   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 03:12:18,907   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 03:12:18,908   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,909   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 03:12:18,909   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 03:12:18,909   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 03:12:18,909   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 03:12:18,910   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,910   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,910   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,911   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,911   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,911   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,911   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 03:12:18,912   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,912   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,913   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 03:12:18,921   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 03:12:18,921   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 03:12:18,968   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:12:18,968   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,969   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 03:12:18,970   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 03:12:18,971   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 03:12:18,972   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:12:18,973   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:12:18,974   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:12:18,975   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:12:18,975   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:12:18,975   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:12:18,984   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 03:12:19,172   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 03:12:19,189   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 03:12:19,198   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 03:12:19,204   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 03:12:19,209   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,215   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,217   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,227   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 03:12:19,228   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 03:12:19,230   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 03:12:19,232   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 03:12:19,236   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,237   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,242   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,245   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,250   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,251   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,254   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,256   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,259   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 03:12:19,261   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 03:12:19,262   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 03:12:19,265   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 03:12:19,267   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 03:12:19,269   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 03:12:19,272   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:12:19,275   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:12:19,277   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:12:19,280   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,281   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,283   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 03:12:19,285   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 03:12:19,287   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 03:12:19,291   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 03:12:19,294   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 03:12:19,296   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 03:12:19,297   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 03:12:19,300   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 03:12:19,302   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 03:12:19,309   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,310   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:12:19,313   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:12:19,315   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:12:19,317   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,319   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 03:12:19,320   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,324   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,326   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,329   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 03:12:19,330   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,333   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,335   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,338   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 03:12:19,339   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,342   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,344   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:12:19,346   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 03:12:19,348   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 03:12:19,351   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 03:12:19,353   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 03:12:19,355   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?);
2014-01-10 03:12:19,357   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 03:12:19,358   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 03:12:19,359   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 03:12:19,362   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 03:12:19,363   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 03:12:19,365   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,367   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:12:19,369   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:12:19,371   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:12:19,373   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,374   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:12:19,377   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:12:19,378   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:12:19,380   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 03:12:19,382   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 03:12:19,384   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 03:12:19,385   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 03:12:19,387   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 03:12:19,388   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 03:12:19,391   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 03:12:19,393   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 03:12:19,395   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 03:12:19,396   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 03:12:19,398   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 03:12:19,400   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 03:12:19,488   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 03:12:19,501   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,503   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 03:12:19,513   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 03:12:19,513   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 03:12:19,518   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,519   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 03:12:19,524   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,524   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 03:12:19,528   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 03:12:19,537   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,538   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 03:12:19,541   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,542   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 03:12:19,568   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,569   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 03:12:19,574   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,575   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 03:12:19,578   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 03:12:19,582   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 03:12:19,586   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,586   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 03:12:19,589   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,590   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 03:12:19,592   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 03:12:19,595   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,601   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 03:12:19,606   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 03:12:19,607   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,608   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,611   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,615   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 03:12:19,617   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,617   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 03:12:19,620   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 03:12:19,620   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 03:12:19,623   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,624   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,625   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 03:12:19,629   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 03:12:19,632   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,633   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 03:12:19,635   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 03:12:19,635   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 03:12:19,638   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 03:12:19,642   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 03:12:19,642   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,643   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 03:12:19,678   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,679   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 03:12:19,682   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,683   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 03:12:19,685   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,687   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 03:12:19,689   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 03:12:19,692   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,695   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,695   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,696   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 03:12:19,697   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,698   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 03:12:19,701   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 03:12:19,701   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 03:12:19,702   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 03:12:19,704   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,704   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 03:12:19,707   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 03:12:19,709   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 03:12:19,711   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,711   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 03:12:19,714   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 03:12:19,714   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 03:12:19,716   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,717   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 03:12:19,719   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,720   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 03:12:19,722   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 03:12:19,724   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,724   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 03:12:19,727   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,729   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 03:12:19,731   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,732   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 03:12:19,736   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,737   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,739   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,740   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 03:12:19,742   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,742   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 03:12:19,745   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 03:12:19,747   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,750   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 03:12:19,753   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,754   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 03:12:19,759   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 03:12:19,767   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 03:12:19,771   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,772   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 03:12:19,804   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,805   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 03:12:19,806   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 03:12:19,807   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,809   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,810   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 03:12:19,814   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 03:12:19,815   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 03:12:19,817   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,817   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,818   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 03:12:19,820   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 03:12:19,821   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 03:12:19,823   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,824   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 03:12:19,826   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 03:12:19,828   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 03:12:19,829   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 03:12:19,829   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 03:12:19,843   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:12:19,855   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 03:12:19,874   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 11:12:21,473   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 11:12:21,487   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 11:12:21,495   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 11:12:21,539   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 11:12:21,540   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 11:12:21,541   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 11:12:21,576   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 11:12:21,583   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 11:12:21,619   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@326b9c84
2014-01-10 11:12:21,623   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 11:12:21,625   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 11:12:21,625   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:47438
2014-01-10 11:12:21,627   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:47438
2014-01-10 11:12:21,638   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x16249a463d800000 with negotiated timeout 6000 for client /127.0.0.1:47438
2014-01-10 11:12:21,642   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x16249a463d800000, negotiated timeout = 6000
2014-01-10 11:12:21,693   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 11:12:21,767   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 11:12:22,186   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 11:12:22,186   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 11:12:22,186   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 11:12:22,187   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 11:12:22,339   INFO  [main] HOST: hsql loaded
2014-01-10 11:12:22,431   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 11:12:24,927   INFO  [main] HOST: hsql loaded
2014-01-10 11:12:24,962   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 11:12:25,449   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 11:12:25,554   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 11:12:25,663   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 11:12:25,709   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 11:12:25,741   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 11:12:25,770   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 11:12:25,907   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 11:12:25,908   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 11:12:25,908   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 11:12:25,909   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 40 ms.
2014-01-10 11:12:25,910   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 25 ms.
2014-01-10 11:12:25,911   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 177 ms.
2014-01-10 11:12:25,921   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:12:25,927   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:12:25,928   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:12:25,993   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 11:12:25,995   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 39 ms.
2014-01-10 11:12:26,017   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:12:26,021   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 11:12:26,302   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 11:12:26,323   INFO  [main] HOST: Database start action is Create.
2014-01-10 11:12:26,323   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 11:12:26,323   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 11:12:26,323   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 11:12:26,323   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 11:12:26,323   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 11:12:26,323   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 11:12:26,324   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 11:12:26,324   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 11:12:26,324   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 11:12:26,324   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 11:12:26,324   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 11:12:26,324   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 11:12:26,324   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 11:12:26,324   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 11:12:26,324   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 11:12:26,324   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 11:12:26,325   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 11:12:26,325   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 11:12:26,331   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 11:12:26,376   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 11:12:26,975   INFO  [Thread-10] CONSOLE: Server completed initialization.
2014-01-10 03:15:21,905   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 03:15:21,909   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 03:15:21,910   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 03:15:21,912   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,912   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,913   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,913   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 03:15:21,914   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 03:15:21,914   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 03:15:21,914   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 03:15:21,915   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 03:15:21,915   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 03:15:21,916   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 03:15:21,916   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 03:15:21,917   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,917   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 03:15:21,918   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,918   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 03:15:21,919   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 03:15:21,920   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 03:15:21,920   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 03:15:21,920   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 03:15:21,920   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 03:15:21,921   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,921   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 03:15:21,922   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 03:15:21,922   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 03:15:21,922   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 03:15:21,923   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,923   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,923   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,924   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,924   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,924   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,924   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 03:15:21,925   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,926   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,926   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 03:15:21,927   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 03:15:21,928   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 03:15:21,984   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,985   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:15:21,986   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 03:15:21,988   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,989   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:15:21,990   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:15:21,991   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 03:15:21,995   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 03:15:22,045   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 03:15:22,055   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 03:15:22,058   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 03:15:22,062   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 03:15:22,065   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,071   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,073   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,077   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 03:15:22,078   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 03:15:22,081   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 03:15:22,083   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 03:15:22,086   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,087   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,090   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,092   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,095   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,096   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,099   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,101   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,104   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 03:15:22,107   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 03:15:22,108   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 03:15:22,110   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 03:15:22,112   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 03:15:22,115   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 03:15:22,116   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:15:22,120   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:15:22,121   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:15:22,124   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,126   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,127   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 03:15:22,129   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 03:15:22,131   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 03:15:22,134   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 03:15:22,136   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 03:15:22,139   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 03:15:22,140   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 03:15:22,142   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 03:15:22,147   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 03:15:22,150   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,157   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:15:22,161   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:15:22,163   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 03:15:22,166   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,167   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 03:15:22,169   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,173   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,176   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,180   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 03:15:22,182   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,185   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,187   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,190   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 03:15:22,191   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,194   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,195   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 03:15:22,198   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 03:15:22,200   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 03:15:22,203   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 03:15:22,206   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 03:15:22,208   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?);
2014-01-10 03:15:22,210   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 03:15:22,211   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 03:15:22,212   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 03:15:22,215   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 03:15:22,217   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 03:15:22,219   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,220   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:15:22,223   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:15:22,224   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:15:22,226   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,227   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:15:22,230   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:15:22,232   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 03:15:22,234   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 03:15:22,235   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 03:15:22,237   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 03:15:22,239   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 03:15:22,241   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 03:15:22,242   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 03:15:22,244   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 03:15:22,246   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 03:15:22,248   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 03:15:22,250   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 03:15:22,252   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 03:15:22,254   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 03:15:22,285   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 03:15:22,289   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,290   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 03:15:22,292   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 03:15:22,292   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 03:15:22,295   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,296   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 03:15:22,299   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,300   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 03:15:22,303   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 03:15:22,309   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,310   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 03:15:22,311   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,312   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 03:15:22,325   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,326   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 03:15:22,328   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,329   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 03:15:22,333   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 03:15:22,339   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 03:15:22,343   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,343   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 03:15:22,345   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,346   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 03:15:22,349   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 03:15:22,355   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,356   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 03:15:22,361   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 03:15:22,363   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,363   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,366   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,368   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 03:15:22,370   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,371   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 03:15:22,373   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 03:15:22,373   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 03:15:22,376   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,377   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,378   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 03:15:22,381   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 03:15:22,384   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,384   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 03:15:22,386   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 03:15:22,387   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 03:15:22,389   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 03:15:22,390   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 03:15:22,390   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,391   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 03:15:22,426   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,426   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 03:15:22,430   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,430   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 03:15:22,433   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,435   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 03:15:22,437   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 03:15:22,439   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,441   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,441   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,442   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 03:15:22,443   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,444   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 03:15:22,458   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 03:15:22,458   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 03:15:22,459   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 03:15:22,461   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,467   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 03:15:22,472   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 03:15:22,475   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 03:15:22,477   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,478   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 03:15:22,481   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 03:15:22,482   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 03:15:22,484   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,484   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 03:15:22,486   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,487   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 03:15:22,497   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 03:15:22,500   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,501   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 03:15:22,504   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,506   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 03:15:22,508   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,509   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 03:15:22,511   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,512   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,514   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,514   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 03:15:22,516   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,517   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 03:15:22,527   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 03:15:22,532   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,534   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 03:15:22,536   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,537   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 03:15:22,539   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 03:15:22,546   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 03:15:22,550   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,550   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 03:15:22,572   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,573   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 03:15:22,574   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 03:15:22,575   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,577   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,579   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 03:15:22,582   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 03:15:22,583   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 03:15:22,585   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,585   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,586   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 03:15:22,588   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 03:15:22,588   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 03:15:22,590   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,591   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 03:15:22,593   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 03:15:22,596   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 03:15:22,596   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 03:15:22,596   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 03:15:22,600   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 03:15:22,601   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 03:15:22,632   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 11:15:23,507   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 11:15:23,517   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 11:15:23,523   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 11:15:23,545   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 11:15:23,546   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 11:15:23,548   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 11:15:23,572   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 11:15:23,579   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 11:15:23,616   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@326b9c84
2014-01-10 11:15:23,620   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 11:15:23,622   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 11:15:23,622   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:47442
2014-01-10 11:15:23,624   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:47442
2014-01-10 11:15:23,635   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x16249ba9b4000000 with negotiated timeout 6000 for client /127.0.0.1:47442
2014-01-10 11:15:23,635   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x16249ba9b4000000, negotiated timeout = 6000
2014-01-10 11:15:23,679   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 11:15:23,734   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 11:15:23,920   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 11:15:23,920   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 11:15:23,920   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 11:15:23,921   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 11:15:24,097   INFO  [main] HOST: hsql loaded
2014-01-10 11:15:24,191   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 11:15:26,012   INFO  [main] HOST: hsql loaded
2014-01-10 11:15:26,016   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 11:15:26,104   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 11:15:26,105   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 11:15:26,279   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 11:15:26,333   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 11:15:26,351   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 11:15:26,355   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 11:15:26,356   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 13 ms.
2014-01-10 11:15:26,363   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:15:26,371   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 11:15:26,385   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 11:15:26,385   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 22 ms.
2014-01-10 11:15:26,410   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:15:26,436   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 11:15:26,437   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 27 ms.
2014-01-10 11:15:26,474   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:15:26,512   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 11:15:26,513   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 38 ms.
2014-01-10 11:15:26,526   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 11:15:26,527   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 11:15:26,551   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 11:15:26,573   INFO  [main] HOST: Database start action is Create.
2014-01-10 11:15:26,573   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 11:15:26,573   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 11:15:26,573   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 11:15:26,573   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 11:15:26,573   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 11:15:26,573   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 11:15:26,573   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 11:15:26,574   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 11:15:26,574   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 11:15:26,574   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 11:15:26,574   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 11:15:26,574   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 11:15:26,574   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 11:15:26,574   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 11:15:26,574   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 11:15:26,574   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 11:15:26,574   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 11:15:26,575   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 11:15:26,588   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 11:15:26,624   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 11:15:27,154   INFO  [Thread-10] CONSOLE: Server completed initialization.
2014-01-10 11:32:08,740   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:50:02,535   WARN  [Volt Network - 1] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:52:44,214   WARN  [Volt Network - 1] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:52:56,204   WARN  [Volt Network - 1] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:52:57,824   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:52:58,683   WARN  [Volt Network - 1] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:52:59,567   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:53:01,132   WARN  [Volt Network - 1] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:53:42,202   WARN  [Volt Network - 1] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:53:48,216   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:53:53,086   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 11:54:15,543   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 12:03:50,589   WARN  [Volt Network - 0] AUTH: Failed to route single partition procedure CHECK.insert invocation based on parameters
2014-01-10 21:06:30,602   WARN  [Client authenticator - 816] HOST: Exception authenticating and registering user in ClientAcceptor
java.io.IOException: Connection reset by peer
	at sun.nio.ch.FileDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:122)
	at sun.nio.ch.IOUtil.write(IOUtil.java:93)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:352)
	at org.voltdb.ClientInterface$ClientAcceptor.authenticate(ClientInterface.java:723)
	at org.voltdb.ClientInterface$ClientAcceptor.access$1000(ClientInterface.java:321)
	at org.voltdb.ClientInterface$ClientAcceptor$1.run(ClientInterface.java:447)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at org.voltcore.utils.CoreUtils$1$1.run(CoreUtils.java:201)
	at java.lang.Thread.run(Thread.java:679)
2014-01-10 13:31:02,913   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 13:31:02,921   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 13:31:02,935   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 13:31:02,937   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,938   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,938   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,939   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 13:31:02,939   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 13:31:02,939   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:31:02,939   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:31:02,940   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:31:02,941   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:31:02,941   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:31:02,942   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 13:31:02,951   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,952   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 13:31:02,953   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,953   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 13:31:02,955   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:31:02,955   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 13:31:02,955   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:31:02,955   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 13:31:02,955   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 13:31:02,956   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,957   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 13:31:02,958   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:31:02,958   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:31:02,958   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:31:02,959   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,959   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,959   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,970   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,970   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,970   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,971   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 13:31:02,971   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,972   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:31:02,973   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 13:31:02,973   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 13:31:02,980   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 13:31:03,045   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:31:03,045   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:31:03,045   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:31:03,045   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,046   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:31:03,047   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 13:31:03,048   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:31:03,049   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:31:03,049   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:31:03,049   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:31:03,049   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:31:03,049   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:31:03,050   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:31:03,051   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:31:03,052   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:31:03,072   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 13:31:03,215   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:31:03,232   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:31:03,235   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 13:31:03,249   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:31:03,272   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,280   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,284   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,288   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 13:31:03,290   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:31:03,294   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:31:03,296   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 13:31:03,299   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,301   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,304   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,309   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,320   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,330   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,334   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,337   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,340   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 13:31:03,343   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 13:31:03,345   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:31:03,348   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:31:03,350   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:31:03,353   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:31:03,355   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:31:03,359   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:31:03,361   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:31:03,364   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,365   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,375   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 13:31:03,378   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:31:03,401   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:31:03,404   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:31:03,409   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:31:03,412   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 13:31:03,414   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:31:03,422   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:31:03,424   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 13:31:03,426   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,428   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:31:03,430   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:31:03,433   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:31:03,435   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,437   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:31:03,439   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,443   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,446   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,452   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:31:03,454   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,457   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,460   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,463   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:31:03,464   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,467   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,469   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:31:03,479   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:31:03,484   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:31:03,487   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:31:03,489   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:31:03,492   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:31:03,494   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 13:31:03,496   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 13:31:03,498   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 13:31:03,500   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 13:31:03,509   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 13:31:03,512   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,514   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:31:03,518   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:31:03,520   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:31:03,522   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,523   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:31:03,526   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:31:03,528   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:31:03,530   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 13:31:03,532   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:31:03,535   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:31:03,538   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 13:31:03,541   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:31:03,543   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:31:03,552   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:31:03,555   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:31:03,558   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 13:31:03,560   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 13:31:03,565   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 13:31:03,568   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 13:31:03,647   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 13:31:03,655   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,656   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:31:03,660   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:31:03,661   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:31:03,666   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,667   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 13:31:03,674   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,675   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 13:31:03,680   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 13:31:03,691   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,692   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 13:31:03,698   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,699   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 13:31:03,748   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,749   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:31:03,753   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,754   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 13:31:03,758   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:31:03,762   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:31:03,768   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,769   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 13:31:03,773   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,774   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 13:31:03,777   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 13:31:03,780   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,781   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:31:03,786   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 13:31:03,789   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,790   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,800   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,805   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 13:31:03,807   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,807   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 13:31:03,810   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 13:31:03,810   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 13:31:03,814   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,816   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,817   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 13:31:03,822   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 13:31:03,825   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,826   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 13:31:03,829   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:31:03,829   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 13:31:03,836   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 13:31:03,840   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 13:31:03,840   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,841   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:31:03,879   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,880   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 13:31:03,884   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,885   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:31:03,896   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,899   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 13:31:03,902   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:31:03,905   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,906   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,906   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,910   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:31:03,915   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,916   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 13:31:03,920   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 13:31:03,920   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 13:31:03,920   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:31:03,924   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,925   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 13:31:03,928   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 13:31:03,931   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 13:31:03,945   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,946   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 13:31:03,951   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 13:31:03,951   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 13:31:03,953   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,954   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 13:31:03,956   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,957   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:31:03,959   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 13:31:03,961   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,962   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 13:31:03,964   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,967   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 13:31:03,969   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:03,970   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 13:31:03,984   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,985   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:31:03,988   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,989   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:31:03,991   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:03,992   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:31:03,994   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:31:04,000   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 13:31:04,004   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 13:31:04,007   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:04,010   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:31:04,013   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 13:31:04,015   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 13:31:04,018   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:04,019   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:31:04,067   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:31:04,068   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:31:04,083   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:31:04,084   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:31:04,093   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:31:04,095   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:31:04,098   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 13:31:04,104   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:31:04,107   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:04,107   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:04,108   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 13:31:04,112   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:31:04,113   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 13:31:04,116   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:04,117   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 13:31:04,120   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:31:04,122   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 13:31:04,122   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:31:04,123   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 13:31:04,129   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:31:04,133   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 13:31:04,151   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 21:31:05,573   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 21:31:05,587   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 21:31:05,596   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 21:31:05,635   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 21:31:05,635   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 21:31:05,637   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 21:31:05,694   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 21:31:05,703   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 21:31:05,710   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@48fd918a
2014-01-10 21:31:05,716   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 21:31:05,718   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:60308
2014-01-10 21:31:05,719   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 21:31:05,721   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:60308
2014-01-10 21:31:05,733   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x1625b5823d000000 with negotiated timeout 6000 for client /127.0.0.1:60308
2014-01-10 21:31:05,734   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1625b5823d000000, negotiated timeout = 6000
2014-01-10 21:31:05,787   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 21:31:05,838   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 21:31:06,130   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 21:31:06,130   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 21:31:06,131   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 21:31:06,131   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 21:31:06,405   INFO  [main] HOST: hsql loaded
2014-01-10 21:31:06,539   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 21:31:09,046   INFO  [main] HOST: hsql loaded
2014-01-10 21:31:09,056   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 21:31:09,126   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 21:31:09,131   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 21:31:09,467   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 21:31:09,557   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 21:31:09,588   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 21:31:09,608   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 21:31:09,608   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 31 ms.
2014-01-10 21:31:09,616   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 21:31:09,619   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 21:31:09,620   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 10 ms.
2014-01-10 21:31:09,627   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:31:09,634   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:31:09,660   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 21:31:09,660   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 27 ms.
2014-01-10 21:31:09,678   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:31:09,723   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 21:31:09,724   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 37 ms.
2014-01-10 21:31:09,745   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:31:09,747   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 21:31:09,775   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 21:31:09,794   INFO  [main] HOST: Database start action is Create.
2014-01-10 21:31:09,794   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 21:31:09,794   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 21:31:09,794   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 21:31:09,794   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 21:31:09,795   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 21:31:09,795   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 21:31:09,796   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 21:31:09,796   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 21:31:09,796   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 21:31:09,796   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 21:31:09,796   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 21:31:09,796   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 21:31:09,796   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 21:31:09,796   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 21:31:09,796   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 21:31:09,796   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 21:31:09,796   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 21:31:09,797   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 21:31:09,825   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 21:31:09,862   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 21:31:10,419   INFO  [Thread-9] CONSOLE: Server completed initialization.
2014-01-10 13:34:05,377   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 13:34:05,381   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 13:34:05,382   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 13:34:05,384   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,384   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,385   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,385   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 13:34:05,385   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 13:34:05,386   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:34:05,386   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:34:05,387   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:34:05,387   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:34:05,388   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:34:05,388   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 13:34:05,389   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,389   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 13:34:05,390   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,390   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 13:34:05,396   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:34:05,396   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 13:34:05,396   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:34:05,396   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 13:34:05,396   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 13:34:05,397   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,398   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 13:34:05,398   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:34:05,398   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:34:05,398   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:34:05,399   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,403   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,403   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,404   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,404   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,404   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,405   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 13:34:05,405   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,406   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,406   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 13:34:05,407   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 13:34:05,408   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 13:34:05,462   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,463   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:34:05,464   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,465   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:34:05,466   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:34:05,467   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:34:05,471   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 13:34:05,530   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:34:05,539   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:34:05,542   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 13:34:05,551   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:34:05,554   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,560   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,562   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,567   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 13:34:05,569   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:34:05,571   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:34:05,573   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 13:34:05,578   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,579   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,583   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,585   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,588   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,589   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,592   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,594   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,596   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 13:34:05,598   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 13:34:05,599   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:34:05,601   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:34:05,603   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:34:05,607   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:34:05,609   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:34:05,613   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:34:05,615   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:34:05,617   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,619   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,622   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 13:34:05,624   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:34:05,626   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:34:05,632   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:34:05,634   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:34:05,636   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 13:34:05,645   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:34:05,651   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:34:05,653   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 13:34:05,655   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,660   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:34:05,673   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:34:05,676   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:34:05,678   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,680   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:34:05,682   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,686   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,688   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,692   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:34:05,693   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,696   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,698   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,701   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:34:05,702   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,705   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,707   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:34:05,710   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:34:05,712   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:34:05,715   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:34:05,717   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:34:05,720   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:34:05,722   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 13:34:05,726   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 13:34:05,728   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 13:34:05,731   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 13:34:05,739   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 13:34:05,741   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,742   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:34:05,752   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:34:05,754   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:34:05,756   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,757   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:34:05,759   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:34:05,761   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:34:05,763   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 13:34:05,764   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:34:05,767   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:34:05,780   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 13:34:05,782   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:34:05,784   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:34:05,794   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:34:05,796   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:34:05,799   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 13:34:05,800   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 13:34:05,815   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 13:34:05,817   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 13:34:05,847   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 13:34:05,850   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,851   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:34:05,854   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:34:05,855   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:34:05,861   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,862   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 13:34:05,867   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:05,868   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 13:34:05,871   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 13:34:05,877   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,878   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 13:34:05,880   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,881   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 13:34:05,899   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 13:34:05,900   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:34:05,902   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:05,903   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 13:34:05,906   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:34:05,909   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:34:05,911   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,912   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 13:34:05,914   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:05,915   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 13:34:05,918   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 13:34:05,921   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 13:34:05,921   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:34:05,926   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 13:34:05,928   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:05,930   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:34:05,934   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 13:34:05,937   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 13:34:05,939   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,941   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 13:34:05,943   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 13:34:05,944   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 13:34:05,946   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 13:34:05,948   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,948   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 13:34:05,951   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 13:34:05,955   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,955   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 13:34:05,957   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:34:05,958   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 13:34:05,961   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 13:34:05,962   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 13:34:05,963   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:05,963   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:34:06,007   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,008   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 13:34:06,018   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,019   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:34:06,021   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,023   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 13:34:06,025   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:34:06,027   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,028   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,029   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,030   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:34:06,031   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,032   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 13:34:06,035   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 13:34:06,036   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 13:34:06,036   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:34:06,038   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,038   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 13:34:06,041   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 13:34:06,045   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 13:34:06,076   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,077   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 13:34:06,079   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 13:34:06,085   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 13:34:06,090   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,091   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 13:34:06,098   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,098   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:34:06,108   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 13:34:06,110   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,111   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 13:34:06,124   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,127   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 13:34:06,129   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,130   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 13:34:06,160   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,167   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,170   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,179   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:34:06,195   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,196   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:34:06,199   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:34:06,222   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,224   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 13:34:06,227   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,235   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:34:06,238   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 13:34:06,253   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 13:34:06,265   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,266   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:34:06,328   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,329   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:34:06,338   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:34:06,339   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,344   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,352   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:34:06,364   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 13:34:06,367   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:34:06,369   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,369   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,370   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 13:34:06,372   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:34:06,373   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 13:34:06,375   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,376   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 13:34:06,400   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:34:06,402   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 13:34:06,402   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:34:06,403   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 13:34:06,417   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:34:06,418   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 13:34:06,427   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 21:34:07,733   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 21:34:07,743   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 21:34:07,751   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 21:34:07,773   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 21:34:07,773   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 21:34:07,775   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 21:34:07,798   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 21:34:07,805   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 21:34:07,840   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@421fbfd6
2014-01-10 21:34:07,845   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 21:34:07,847   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:60313
2014-01-10 21:34:07,848   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 21:34:07,849   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:60313
2014-01-10 21:34:07,862   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x1625b6e5f5000000 with negotiated timeout 6000 for client /127.0.0.1:60313
2014-01-10 21:34:07,862   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1625b6e5f5000000, negotiated timeout = 6000
2014-01-10 21:34:07,906   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 21:34:07,955   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 21:34:08,171   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 21:34:08,171   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 21:34:08,171   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 21:34:08,172   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 21:34:08,317   INFO  [main] HOST: hsql loaded
2014-01-10 21:34:08,408   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 21:34:10,162   INFO  [main] HOST: hsql loaded
2014-01-10 21:34:10,166   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 21:34:10,227   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 21:34:10,227   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 21:34:10,402   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 21:34:10,447   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 21:34:10,472   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 21:34:10,475   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 21:34:10,476   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 12 ms.
2014-01-10 21:34:10,484   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:34:10,491   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 21:34:10,500   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 21:34:10,500   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 9 ms.
2014-01-10 21:34:10,524   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:34:10,554   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 21:34:10,554   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 33 ms.
2014-01-10 21:34:10,590   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:34:10,629   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 21:34:10,629   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 28 ms.
2014-01-10 21:34:10,642   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:34:10,644   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 21:34:10,674   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 21:34:10,690   INFO  [main] HOST: Database start action is Create.
2014-01-10 21:34:10,690   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 21:34:10,690   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 21:34:10,690   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 21:34:10,690   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 21:34:10,691   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 21:34:10,691   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 21:34:10,691   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 21:34:10,692   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 21:34:10,692   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 21:34:10,692   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 21:34:10,692   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 21:34:10,692   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 21:34:10,692   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 21:34:10,692   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 21:34:10,692   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 21:34:10,692   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 21:34:10,692   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 21:34:10,693   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 21:34:10,710   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 21:34:10,748   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 21:34:11,279   INFO  [Thread-9] CONSOLE: Server completed initialization.
2014-01-10 13:39:37,400   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 13:39:37,403   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 13:39:37,404   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 13:39:37,406   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,406   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,407   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,407   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 13:39:37,407   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 13:39:37,408   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:39:37,408   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:39:37,409   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:39:37,409   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:39:37,410   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:39:37,410   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 13:39:37,411   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,411   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 13:39:37,412   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,412   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 13:39:37,414   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:39:37,414   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 13:39:37,414   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:39:37,414   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 13:39:37,414   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 13:39:37,415   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,416   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 13:39:37,417   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:39:37,417   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:39:37,417   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:39:37,418   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,418   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,418   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,419   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,419   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,419   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,419   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 13:39:37,420   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,420   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,421   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 13:39:37,422   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 13:39:37,423   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:39:37,464   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:39:37,474   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:39:37,475   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:39:37,476   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:39:37,477   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:39:37,478   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:39:37,478   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:39:37,478   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:39:37,478   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:39:37,478   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:39:37,478   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:39:37,482   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 13:39:37,530   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:39:37,539   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:39:37,544   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 13:39:37,553   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:39:37,556   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,561   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,563   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,567   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 13:39:37,569   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:39:37,571   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:39:37,573   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 13:39:37,577   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,578   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,582   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,585   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,587   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,588   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,591   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,592   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,595   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 13:39:37,597   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 13:39:37,598   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:39:37,600   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:39:37,602   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:39:37,605   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:39:37,606   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:39:37,609   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:39:37,611   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:39:37,613   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,614   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,617   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 13:39:37,619   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:39:37,621   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:39:37,628   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:39:37,630   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:39:37,633   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 13:39:37,635   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:39:37,640   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:39:37,645   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 13:39:37,647   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,655   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:39:37,658   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:39:37,660   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:39:37,663   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,664   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:39:37,666   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,670   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,672   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,675   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:39:37,677   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,680   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,682   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,685   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:39:37,686   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,689   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,691   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:39:37,693   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:39:37,695   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:39:37,698   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:39:37,700   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:39:37,702   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:39:37,704   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 13:39:37,705   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 13:39:37,707   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 13:39:37,709   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 13:39:37,711   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 13:39:37,714   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,716   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:39:37,718   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:39:37,720   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:39:37,722   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,724   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:39:37,726   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:39:37,728   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:39:37,730   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 13:39:37,732   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:39:37,734   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:39:37,735   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 13:39:37,737   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:39:37,738   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:39:37,740   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:39:37,741   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:39:37,743   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 13:39:37,744   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 13:39:37,746   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 13:39:37,747   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 13:39:37,778   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 13:39:37,781   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,782   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:39:37,784   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:39:37,785   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:39:37,788   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,789   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 13:39:37,792   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,793   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 13:39:37,795   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 13:39:37,801   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,802   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 13:39:37,804   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,804   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 13:39:37,828   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,829   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:39:37,831   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,832   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 13:39:37,836   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:39:37,839   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:39:37,841   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,842   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 13:39:37,844   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,845   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 13:39:37,848   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 13:39:37,854   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,854   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:39:37,859   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 13:39:37,860   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,861   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:39:37,865   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 13:39:37,868   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 13:39:37,870   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,871   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 13:39:37,873   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 13:39:37,874   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 13:39:37,883   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 13:39:37,885   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,886   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 13:39:37,889   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 13:39:37,891   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,892   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 13:39:37,894   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:39:37,894   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 13:39:37,897   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 13:39:37,898   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 13:39:37,898   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,899   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:39:37,940   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,941   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 13:39:37,944   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,945   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:39:37,948   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:39:37,950   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 13:39:37,952   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:39:37,954   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:39:37,956   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,956   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,957   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:39:37,961   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,962   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 13:39:37,966   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 13:39:37,966   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 13:39:37,967   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:39:37,969   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,969   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 13:39:37,973   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 13:39:37,976   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 13:39:37,985   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,986   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 13:39:37,990   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 13:39:37,991   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 13:39:37,993   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:37,994   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 13:39:37,996   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:37,997   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:39:37,999   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 13:39:38,003   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,004   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 13:39:38,009   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:39:38,012   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 13:39:38,014   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:38,015   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 13:39:38,017   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,018   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:39:38,019   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,020   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:39:38,027   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,028   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:39:38,031   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:39:38,033   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 13:39:38,034   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 13:39:38,036   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,037   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:39:38,042   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 13:39:38,044   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 13:39:38,047   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,048   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:39:38,069   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:39:38,070   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:39:38,072   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:39:38,073   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:39:38,076   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:39:38,080   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:39:38,083   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 13:39:38,085   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:39:38,089   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,089   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,090   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 13:39:38,092   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:39:38,093   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 13:39:38,095   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:38,096   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 13:39:38,098   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:39:38,101   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 13:39:38,101   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:39:38,102   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 13:39:38,105   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:39:38,106   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 13:39:38,115   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 21:39:39,156   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 21:39:39,166   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 21:39:39,172   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 21:39:39,195   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 21:39:39,195   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 21:39:39,197   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 21:39:39,226   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 21:39:39,233   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 21:39:39,267   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@326b9c84
2014-01-10 21:39:39,272   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 21:39:39,274   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 21:39:39,274   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:60326
2014-01-10 21:39:39,276   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:60326
2014-01-10 21:39:39,287   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x1625b96d46000000 with negotiated timeout 6000 for client /127.0.0.1:60326
2014-01-10 21:39:39,287   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1625b96d46000000, negotiated timeout = 6000
2014-01-10 21:39:39,329   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 21:39:39,378   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 21:39:39,556   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 21:39:39,556   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 21:39:39,556   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 21:39:39,557   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 21:39:39,705   INFO  [main] HOST: hsql loaded
2014-01-10 21:39:39,792   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 21:39:41,666   INFO  [main] HOST: hsql loaded
2014-01-10 21:39:41,670   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 21:39:41,732   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 21:39:41,733   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 21:39:41,920   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 21:39:41,969   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 21:39:42,000   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 21:39:42,005   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 21:39:42,006   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 13 ms.
2014-01-10 21:39:42,017   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:39:42,019   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 21:39:42,032   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 21:39:42,033   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 17 ms.
2014-01-10 21:39:42,040   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:39:42,063   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 21:39:42,063   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 26 ms.
2014-01-10 21:39:42,087   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:39:42,144   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 21:39:42,145   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 23 ms.
2014-01-10 21:39:42,158   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:39:42,160   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 21:39:42,184   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 21:39:42,217   INFO  [main] HOST: Database start action is Create.
2014-01-10 21:39:42,217   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 21:39:42,217   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 21:39:42,217   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 21:39:42,217   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 21:39:42,218   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 21:39:42,218   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 21:39:42,218   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 21:39:42,218   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 21:39:42,218   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 21:39:42,218   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 21:39:42,218   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 21:39:42,218   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 21:39:42,218   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 21:39:42,218   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 21:39:42,218   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 21:39:42,218   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 21:39:42,219   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 21:39:42,220   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 21:39:42,238   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 21:39:42,271   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 21:39:42,812   INFO  [Thread-10] CONSOLE: Server completed initialization.
2014-01-10 13:43:06,441   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 13:43:06,451   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 13:43:06,452   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 13:43:06,454   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,455   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,455   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,455   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 13:43:06,456   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 13:43:06,456   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:43:06,456   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:43:06,457   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:43:06,457   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:43:06,463   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:43:06,464   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 13:43:06,464   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,468   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 13:43:06,468   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,468   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 13:43:06,469   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:06,469   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:06,469   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:06,470   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:06,470   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:06,470   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,471   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 13:43:06,471   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:43:06,471   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:43:06,471   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:43:06,471   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,472   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,472   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,472   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,472   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,472   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,472   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 13:43:06,473   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,473   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,473   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 13:43:06,476   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 13:43:06,476   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 13:43:06,512   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:06,512   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:06,512   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:06,512   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:06,513   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:06,514   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:06,515   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:06,516   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:06,520   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:06,576   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:43:06,584   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:43:06,590   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 13:43:06,594   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:43:06,597   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,603   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,606   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,617   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 13:43:06,618   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:43:06,621   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:43:06,624   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 13:43:06,628   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,629   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,634   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,637   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,640   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,642   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,644   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,646   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,649   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 13:43:06,653   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 13:43:06,654   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:43:06,657   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:43:06,658   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:43:06,661   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:06,662   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:06,666   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:06,668   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:06,671   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,672   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,674   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 13:43:06,676   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:06,677   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:43:06,681   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:43:06,683   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:43:06,685   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 13:43:06,686   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:43:06,689   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:43:06,694   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 13:43:06,697   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,698   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:06,701   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:06,703   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:06,705   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,706   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:43:06,708   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,712   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,715   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,717   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:43:06,719   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,721   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,723   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,725   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:43:06,726   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,728   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,730   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:06,733   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:43:06,734   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:43:06,737   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:43:06,738   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:43:06,740   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:43:06,742   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 13:43:06,743   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 13:43:06,744   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 13:43:06,747   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 13:43:06,748   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 13:43:06,750   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,751   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:06,754   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:06,755   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:06,758   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,759   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:06,761   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:06,763   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:06,765   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 13:43:06,766   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:43:06,768   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:43:06,770   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 13:43:06,772   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:43:06,773   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:43:06,781   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:43:06,783   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:43:06,784   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 13:43:06,785   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 13:43:06,787   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 13:43:06,788   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 13:43:06,817   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 13:43:06,820   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,821   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:06,822   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:43:06,823   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:43:06,825   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,826   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 13:43:06,828   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,829   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 13:43:06,831   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 13:43:06,837   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,837   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 13:43:06,839   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,839   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 13:43:06,852   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,853   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:43:06,854   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,855   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 13:43:06,858   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:43:06,860   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:43:06,862   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,863   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 13:43:06,864   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,865   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 13:43:06,867   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 13:43:06,873   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,874   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:43:06,879   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 13:43:06,880   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,881   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:43:06,891   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 13:43:06,894   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 13:43:06,897   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,897   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 13:43:06,901   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 13:43:06,902   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 13:43:06,905   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 13:43:06,907   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,908   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 13:43:06,912   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 13:43:06,916   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,916   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 13:43:06,919   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:43:06,919   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 13:43:06,923   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 13:43:06,927   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 13:43:06,927   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,928   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:43:06,978   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:43:06,979   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 13:43:06,982   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,983   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:43:06,986   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:43:06,991   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 13:43:06,993   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:43:06,996   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:43:06,997   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:06,997   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,006   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:43:07,009   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,010   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 13:43:07,013   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 13:43:07,013   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 13:43:07,014   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:43:07,016   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,016   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 13:43:07,019   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 13:43:07,021   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 13:43:07,022   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:07,023   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 13:43:07,025   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 13:43:07,025   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 13:43:07,027   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,028   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 13:43:07,029   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:07,030   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:43:07,032   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 13:43:07,033   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,034   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 13:43:07,048   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:43:07,052   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 13:43:07,054   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:07,054   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 13:43:07,058   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,063   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:43:07,065   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,066   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:43:07,067   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,068   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:43:07,071   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:43:07,074   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 13:43:07,076   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 13:43:07,077   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,078   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:43:07,080   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 13:43:07,082   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 13:43:07,158   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,159   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:43:07,205   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:43:07,207   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:07,208   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:43:07,209   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:43:07,212   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:43:07,214   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:43:07,216   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 13:43:07,218   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:43:07,219   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,219   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,220   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 13:43:07,222   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:43:07,223   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 13:43:07,227   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:07,228   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 13:43:07,230   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:43:07,232   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 13:43:07,232   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:07,233   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 13:43:07,246   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:07,247   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 13:43:07,255   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 21:43:08,173   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 21:43:08,183   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 21:43:08,189   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 21:43:08,217   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 21:43:08,217   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 21:43:08,219   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 21:43:08,248   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 21:43:08,256   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 21:43:08,294   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@326b9c84
2014-01-10 21:43:08,298   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 21:43:08,300   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 21:43:08,300   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:60330
2014-01-10 21:43:08,305   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:60330
2014-01-10 21:43:08,317   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x1625bb0588800000 with negotiated timeout 6000 for client /127.0.0.1:60330
2014-01-10 21:43:08,317   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1625bb0588800000, negotiated timeout = 6000
2014-01-10 21:43:08,362   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 21:43:08,411   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 21:43:08,610   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 21:43:08,610   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 21:43:08,610   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 21:43:08,611   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 21:43:08,800   INFO  [main] HOST: hsql loaded
2014-01-10 21:43:08,890   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 21:43:10,714   INFO  [main] HOST: hsql loaded
2014-01-10 21:43:10,718   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 21:43:10,775   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 21:43:10,776   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 21:43:10,944   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 21:43:11,015   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 21:43:11,034   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 21:43:11,074   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 21:43:11,075   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 50 ms.
2014-01-10 21:43:11,097   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 21:43:11,103   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:11,117   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 21:43:11,117   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 20 ms.
2014-01-10 21:43:11,148   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 21:43:11,148   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 9 ms.
2014-01-10 21:43:11,151   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:11,162   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:11,217   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 21:43:11,218   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 18 ms.
2014-01-10 21:43:11,231   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:11,233   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 21:43:11,258   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 21:43:11,274   INFO  [main] HOST: Database start action is Create.
2014-01-10 21:43:11,274   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 21:43:11,274   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 21:43:11,274   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 21:43:11,274   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 21:43:11,274   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 21:43:11,274   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 21:43:11,274   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 21:43:11,274   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 21:43:11,274   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 21:43:11,275   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 21:43:11,275   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 21:43:11,275   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 21:43:11,275   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 21:43:11,275   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 21:43:11,275   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 21:43:11,275   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 21:43:11,275   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 21:43:11,275   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 21:43:11,289   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 21:43:11,330   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 21:43:11,863   INFO  [Thread-10] CONSOLE: Server completed initialization.
2014-01-10 13:43:28,165   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10019_10020 on table: LOGQUEUE of type: BALANCED_TREE
2014-01-10 13:43:28,169   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10025_10026 on table: ENDPOINTPROPERTYLOG of type: BALANCED_TREE
2014-01-10 13:43:28,170   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10030_10031 on table: USER of type: BALANCED_TREE
2014-01-10 13:43:28,179   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10035_10036 on table: ENDPOINT_USER_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,180   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10040_10041 on table: ENDPOINT_SPHERE_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,180   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10045_10046 on table: SPHERE_USER_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,180   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10049_10050 on table: SPHERE of type: BALANCED_TREE
2014-01-10 13:43:28,181   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10053_10054 on table: ENDPOINTCLASS of type: BALANCED_TREE
2014-01-10 13:43:28,181   INFO  [main] COMPILER: [null]: Created index: EPEPC on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:43:28,181   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10058_10059 on table: ENDPOINT of type: BALANCED_TREE
2014-01-10 13:43:28,182   INFO  [main] COMPILER: [null]: Created index: PREPC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:43:28,182   INFO  [main] COMPILER: [null]: Created index: PRPRC on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:43:28,183   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10063_10064 on table: PROPERTY of type: BALANCED_TREE
2014-01-10 13:43:28,183   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10067_10068 on table: PROPERTYCLASS of type: BALANCED_TREE
2014-01-10 13:43:28,183   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10072_10073 on table: MESSAGE_ENDPOINT_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,184   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10076_10077 on table: MESSAGE of type: BALANCED_TREE
2014-01-10 13:43:28,184   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10081_10082 on table: MESSAGE_EXPRESSION_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,185   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10085_10086 on table: EXPRESSION of type: BALANCED_TREE
2014-01-10 13:43:28,186   INFO  [main] COMPILER: [null]: Created index: CHEP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:28,186   INFO  [main] COMPILER: [null]: Created index: CHPR on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:28,186   INFO  [main] COMPILER: [null]: Created index: CHCP on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:28,186   INFO  [main] COMPILER: [null]: Created index: CHST on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:28,186   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10091_10092 on table: CHECK of type: BALANCED_TREE
2014-01-10 13:43:28,187   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10096_10097 on table: RULE_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,188   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10099_10100 on table: RULE of type: BALANCED_TREE
2014-01-10 13:43:28,188   INFO  [main] COMPILER: [null]: Created index: MCCP on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:43:28,188   INFO  [main] COMPILER: [null]: Created index: MCST on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:43:28,189   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10103_10104 on table: MULTICHECK of type: BALANCED_TREE
2014-01-10 13:43:28,189   INFO  [main] COMPILER: [null]: Created index: MCLMC on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,189   INFO  [main] COMPILER: [null]: Created index: MCLCH on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,189   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10109_10110 on table: MULTICHECK_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,190   INFO  [main] COMPILER: [null]: Created index: MCMCLR on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,190   INFO  [main] COMPILER: [null]: Created index: MCMCLL on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,190   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10115_10116 on table: MULTICHECK_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,190   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10118_10119 on table: CHECKPATH of type: BALANCED_TREE
2014-01-10 13:43:28,191   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10123_10124 on table: CHECKPATH_CHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,191   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10128_10129 on table: CHECKPATH_MULTICHECK_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,191   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10132_10133 on table: ACTION of type: BALANCED_TREE
2014-01-10 13:43:28,192   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10136_10137 on table: OUTBOUNDPROPERTYACTION of type: BALANCED_TREE
2014-01-10 13:43:28,192   INFO  [main] COMPILER: [null]: Created index: SYS_IDX_SYS_PK_10141_10142 on table: RULE_ACTION_LINK of type: BALANCED_TREE
2014-01-10 13:43:28,219   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:28,219   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:28,219   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ACTION WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:28,219   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?); for ACTION with partitioning: ACTION.ACTIONID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?); for CHECK with partitioning: CHECK.CHECKPATHID:8
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH VALUES (?, ?, ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?); for CHECKPATH with partitioning: CHECKPATH.CHECKPATHID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_CHECK_LINK with partitioning: CHECKPATH_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for CHECKPATH_MULTICHECK_LINK with partitioning: CHECKPATH_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT VALUES (?, ?, ?); for ENDPOINT
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTCLASS VALUES (?, ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:28,220   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?); for ENDPOINTCLASS with partitioning: ENDPOINTCLASS.ENDPOINTCLASSID:0
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?); for ENDPOINTPROPERTYLOG with partitioning: ENDPOINTPROPERTYLOG.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?); for ENDPOINT_SPHERE_LINK
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?); for ENDPOINT_USER_LINK
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO EXPRESSION VALUES (?, ?, ?); for EXPRESSION
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?); for LOGQUEUE with partitioning: LOGQUEUE.QUEUENAME:2
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE VALUES (?, ?, ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?); for MESSAGE with partitioning: MESSAGE.MESSAGEID:0
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?); for MESSAGE_ENDPOINT_LINK with partitioning: MESSAGE_ENDPOINT_LINK.ENDPOINTID:1
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?); for MESSAGE_EXPRESSION_LINK
2014-01-10 13:43:28,221   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?); for MULTICHECK with partitioning: MULTICHECK.CHECKPATHID:5
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_CHECK_LINK with partitioning: MULTICHECK_CHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?); for MULTICHECK_MULTICHECK_LINK with partitioning: MULTICHECK_MULTICHECK_LINK.CHECKPATHID:3
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:1
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?); for OUTBOUNDPROPERTYACTION with partitioning: OUTBOUNDPROPERTYACTION.ACTIONID:5
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?); for PROPERTY
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in INSERT multi-partition procedure: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?); for PROPERTYCLASS
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE VALUES (?, ?, ?, ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:28,222   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?); for RULE with partitioning: RULE.RULEID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_ACTION_LINK with partitioning: RULE_ACTION_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?); for RULE_MULTICHECK_LINK with partitioning: RULE_MULTICHECK_LINK.RULEID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE VALUES (?, ?, ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?); for SPHERE with partitioning: SPHERE.SPHEREID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?); for SPHERE_USER_LINK with partitioning: SPHERE_USER_LINK.SPHEREID:1
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in INSERT procedure: INSERT INTO USER VALUES (?, ?, ?, ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in SELECT procedure: SELECT * FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in DELETE procedure: DELETE FROM USER WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:28,223   INFO  [main] COMPILER: Synthesized built-in UPDATE procedure: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?); for USER with partitioning: USER.USERID:0
2014-01-10 13:43:28,227   INFO  [main] COMPILER: [ACTION.insert]: Compiling Statement: INSERT INTO ACTION VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:28,278   INFO  [main] COMPILER: [ACTION.select]: Compiling Statement: SELECT * FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:43:28,287   INFO  [main] COMPILER: [ACTION.delete]: Compiling Statement: DELETE FROM ACTION WHERE (ACTIONID = ?);
2014-01-10 13:43:28,289   INFO  [main] COMPILER: [ACTION.update]: Compiling Statement: UPDATE ACTION SET ACTIONID = ?, ACTIONNAME = ?, TARGETENDPOINTID = ?, TGTEPIDFROMINBOUNDPROP = ?, EXPIRED = ? WHERE (ACTIONID = ?);
2014-01-10 13:43:28,295   INFO  [main] COMPILER: [CHECK.insert]: Compiling Statement: INSERT INTO CHECK VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:43:28,299   INFO  [main] COMPILER: [CHECK.select]: Compiling Statement: SELECT * FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,304   INFO  [main] COMPILER: [CHECK.delete]: Compiling Statement: DELETE FROM CHECK WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,313   INFO  [main] COMPILER: [CHECK.update]: Compiling Statement: UPDATE CHECK SET CHECKID = ?, ENDPOINTID = ?, PROPERTYID = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, NAME = ?, CHECKPATHID = ? WHERE (CHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,317   INFO  [main] COMPILER: [CHECKPATH.insert]: Compiling Statement: INSERT INTO CHECKPATH VALUES (?, ?, ?);
2014-01-10 13:43:28,318   INFO  [main] COMPILER: [CHECKPATH.select]: Compiling Statement: SELECT * FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:43:28,320   INFO  [main] COMPILER: [CHECKPATH.delete]: Compiling Statement: DELETE FROM CHECKPATH WHERE (CHECKPATHID = ?);
2014-01-10 13:43:28,322   INFO  [main] COMPILER: [CHECKPATH.update]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHID = ?, CHECKPATHNAME = ?, UIOBJECT = ? WHERE (CHECKPATHID = ?);
2014-01-10 13:43:28,325   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_CHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,327   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,329   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,331   INFO  [main] COMPILER: [CHECKPATH_CHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_CHECK_LINK SET LINKID = ?, CHECKPATHID = ?, CHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,336   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO CHECKPATH_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,337   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,339   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM CHECKPATH_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,342   INFO  [main] COMPILER: [CHECKPATH_MULTICHECK_LINK.update]: Compiling Statement: UPDATE CHECKPATH_MULTICHECK_LINK SET LINKID = ?, CHECKPATHID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,344   INFO  [main] COMPILER: [ENDPOINT.insert]: Compiling Statement: INSERT INTO ENDPOINT VALUES (?, ?, ?);
2014-01-10 13:43:28,347   INFO  [main] COMPILER: [ENDPOINTCLASS.insert]: Compiling Statement: INSERT INTO ENDPOINTCLASS VALUES (?, ?);
2014-01-10 13:43:28,348   INFO  [main] COMPILER: [ENDPOINTCLASS.select]: Compiling Statement: SELECT * FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:43:28,353   INFO  [main] COMPILER: [ENDPOINTCLASS.delete]: Compiling Statement: DELETE FROM ENDPOINTCLASS WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:43:28,355   INFO  [main] COMPILER: [ENDPOINTCLASS.update]: Compiling Statement: UPDATE ENDPOINTCLASS SET ENDPOINTCLASSID = ?, ENDPOINTCLASSNAME = ? WHERE (ENDPOINTCLASSID = ?);
2014-01-10 13:43:28,357   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.insert]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:28,360   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.select]: Compiling Statement: SELECT * FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:28,364   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.delete]: Compiling Statement: DELETE FROM ENDPOINTPROPERTYLOG WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:28,366   INFO  [main] COMPILER: [ENDPOINTPROPERTYLOG.update]: Compiling Statement: UPDATE ENDPOINTPROPERTYLOG SET ENTRYID = ?, ENDPOINTID = ?, PROPERTYID = ?, PROPERTYENTRY = ?, TIME_STAMP = ? WHERE (ENTRYID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:28,368   INFO  [main] COMPILER: [ENDPOINT_SPHERE_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_SPHERE_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,370   INFO  [main] COMPILER: [ENDPOINT_USER_LINK.insert]: Compiling Statement: INSERT INTO ENDPOINT_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,372   INFO  [main] COMPILER: [EXPRESSION.insert]: Compiling Statement: INSERT INTO EXPRESSION VALUES (?, ?, ?);
2014-01-10 13:43:28,373   INFO  [main] COMPILER: [LOGQUEUE.insert]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:28,375   INFO  [main] COMPILER: [LOGQUEUE.select]: Compiling Statement: SELECT * FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:43:28,380   INFO  [main] COMPILER: [LOGQUEUE.delete]: Compiling Statement: DELETE FROM LOGQUEUE WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:43:28,382   INFO  [main] COMPILER: [LOGQUEUE.update]: Compiling Statement: UPDATE LOGQUEUE SET EXCHANGENAME = ?, MESSAGE = ?, QUEUENAME = ?, ROUTINGKEY = ?, IDENTIFIER = ? WHERE (IDENTIFIER = ?) AND (QUEUENAME = ?);
2014-01-10 13:43:28,385   INFO  [main] COMPILER: [MESSAGE.insert]: Compiling Statement: INSERT INTO MESSAGE VALUES (?, ?, ?);
2014-01-10 13:43:28,386   INFO  [main] COMPILER: [MESSAGE.select]: Compiling Statement: SELECT * FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:43:28,391   INFO  [main] COMPILER: [MESSAGE.delete]: Compiling Statement: DELETE FROM MESSAGE WHERE (MESSAGEID = ?);
2014-01-10 13:43:28,397   INFO  [main] COMPILER: [MESSAGE.update]: Compiling Statement: UPDATE MESSAGE SET MESSAGEID = ?, EXPRESSIONCOUNT = ?, TIME_STAMP = ? WHERE (MESSAGEID = ?);
2014-01-10 13:43:28,399   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_ENDPOINT_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,400   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.select]: Compiling Statement: SELECT * FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:28,406   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.delete]: Compiling Statement: DELETE FROM MESSAGE_ENDPOINT_LINK WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:28,409   INFO  [main] COMPILER: [MESSAGE_ENDPOINT_LINK.update]: Compiling Statement: UPDATE MESSAGE_ENDPOINT_LINK SET LINKID = ?, ENDPOINTID = ?, MESSAGEID = ? WHERE (LINKID = ?) AND (ENDPOINTID = ?);
2014-01-10 13:43:28,412   INFO  [main] COMPILER: [MESSAGE_EXPRESSION_LINK.insert]: Compiling Statement: INSERT INTO MESSAGE_EXPRESSION_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,413   INFO  [main] COMPILER: [MULTICHECK.insert]: Compiling Statement: INSERT INTO MULTICHECK VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:43:28,415   INFO  [main] COMPILER: [MULTICHECK.select]: Compiling Statement: SELECT * FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,419   INFO  [main] COMPILER: [MULTICHECK.delete]: Compiling Statement: DELETE FROM MULTICHECK WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,421   INFO  [main] COMPILER: [MULTICHECK.update]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKID = ?, OPERATOR = ?, STATE = ?, EXPIRED = ?, MULTICHECKNAME = ?, CHECKPATHID = ? WHERE (MULTICHECKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,424   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_CHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:43:28,427   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,431   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,433   INFO  [main] COMPILER: [MULTICHECK_CHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_CHECK_LINK SET LINKID = ?, MULTICHECKID = ?, CHECKID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,436   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO MULTICHECK_MULTICHECK_LINK VALUES (?, ?, ?, ?);
2014-01-10 13:43:28,438   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,441   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,442   INFO  [main] COMPILER: [MULTICHECK_MULTICHECK_LINK.update]: Compiling Statement: UPDATE MULTICHECK_MULTICHECK_LINK SET LINKID = ?, MULTICHECKLID = ?, MULTICHECKRID = ?, CHECKPATHID = ? WHERE (LINKID = ?) AND (CHECKPATHID = ?);
2014-01-10 13:43:28,447   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.insert]: Compiling Statement: INSERT INTO OUTBOUNDPROPERTYACTION VALUES (?, ?, ?, ?, ?, ?);
2014-01-10 13:43:28,449   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.select]: Compiling Statement: SELECT * FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:43:28,452   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.delete]: Compiling Statement: DELETE FROM OUTBOUNDPROPERTYACTION WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:43:28,454   INFO  [main] COMPILER: [OUTBOUNDPROPERTYACTION.update]: Compiling Statement: UPDATE OUTBOUNDPROPERTYACTION SET OUTBOUNDPROPERTYACTIONID = ?, OUTBOUNDPROPERTYID = ?, INBOUNDPROPERTYID = ?, CURRENTSTATEPROPERTYID = ?, CUSTOMPAYLOAD = ?, ACTIONID = ? WHERE (OUTBOUNDPROPERTYACTIONID = ?) AND (ACTIONID = ?);
2014-01-10 13:43:28,456   INFO  [main] COMPILER: [PROPERTY.insert]: Compiling Statement: INSERT INTO PROPERTY VALUES (?, ?, ?, ?, ?, ?, ?, ?);
2014-01-10 13:43:28,458   INFO  [main] COMPILER: [PROPERTYCLASS.insert]: Compiling Statement: INSERT INTO PROPERTYCLASS VALUES (?, ?, ?, ?);
2014-01-10 13:43:28,460   INFO  [main] COMPILER: [RULE.insert]: Compiling Statement: INSERT INTO RULE VALUES (?, ?, ?, ?);
2014-01-10 13:43:28,461   INFO  [main] COMPILER: [RULE.select]: Compiling Statement: SELECT * FROM RULE WHERE (RULEID = ?);
2014-01-10 13:43:28,463   INFO  [main] COMPILER: [RULE.delete]: Compiling Statement: DELETE FROM RULE WHERE (RULEID = ?);
2014-01-10 13:43:28,472   INFO  [main] COMPILER: [RULE.update]: Compiling Statement: UPDATE RULE SET RULEID = ?, RULENAME = ?, CHECKID = ?, MULTICHECKID = ? WHERE (RULEID = ?);
2014-01-10 13:43:28,488   INFO  [main] COMPILER: [RULE_ACTION_LINK.insert]: Compiling Statement: INSERT INTO RULE_ACTION_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,489   INFO  [main] COMPILER: [RULE_ACTION_LINK.select]: Compiling Statement: SELECT * FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:28,498   INFO  [main] COMPILER: [RULE_ACTION_LINK.delete]: Compiling Statement: DELETE FROM RULE_ACTION_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:28,504   INFO  [main] COMPILER: [RULE_ACTION_LINK.update]: Compiling Statement: UPDATE RULE_ACTION_LINK SET LINKID = ?, RULEID = ?, ACTIONID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:28,507   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.insert]: Compiling Statement: INSERT INTO RULE_MULTICHECK_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,509   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.select]: Compiling Statement: SELECT * FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:28,515   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.delete]: Compiling Statement: DELETE FROM RULE_MULTICHECK_LINK WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:28,519   INFO  [main] COMPILER: [RULE_MULTICHECK_LINK.update]: Compiling Statement: UPDATE RULE_MULTICHECK_LINK SET LINKID = ?, RULEID = ?, MULTICHECKID = ? WHERE (LINKID = ?) AND (RULEID = ?);
2014-01-10 13:43:28,522   INFO  [main] COMPILER: [SPHERE.insert]: Compiling Statement: INSERT INTO SPHERE VALUES (?, ?, ?);
2014-01-10 13:43:28,525   INFO  [main] COMPILER: [SPHERE.select]: Compiling Statement: SELECT * FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:43:28,528   INFO  [main] COMPILER: [SPHERE.delete]: Compiling Statement: DELETE FROM SPHERE WHERE (SPHEREID = ?);
2014-01-10 13:43:28,529   INFO  [main] COMPILER: [SPHERE.update]: Compiling Statement: UPDATE SPHERE SET SPHEREID = ?, SPHERENAME = ?, PUBLIC = ? WHERE (SPHEREID = ?);
2014-01-10 13:43:28,533   INFO  [main] COMPILER: [SPHERE_USER_LINK.insert]: Compiling Statement: INSERT INTO SPHERE_USER_LINK VALUES (?, ?, ?);
2014-01-10 13:43:28,535   INFO  [main] COMPILER: [SPHERE_USER_LINK.select]: Compiling Statement: SELECT * FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:43:28,543   INFO  [main] COMPILER: [SPHERE_USER_LINK.delete]: Compiling Statement: DELETE FROM SPHERE_USER_LINK WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:43:28,553   INFO  [main] COMPILER: [SPHERE_USER_LINK.update]: Compiling Statement: UPDATE SPHERE_USER_LINK SET LINKID = ?, SPHEREID = ?, USERID = ? WHERE (LINKID = ?) AND (SPHEREID = ?);
2014-01-10 13:43:28,556   INFO  [main] COMPILER: [USER.insert]: Compiling Statement: INSERT INTO USER VALUES (?, ?, ?, ?);
2014-01-10 13:43:28,557   INFO  [main] COMPILER: [USER.select]: Compiling Statement: SELECT * FROM USER WHERE (USERID = ?);
2014-01-10 13:43:28,560   INFO  [main] COMPILER: [USER.delete]: Compiling Statement: DELETE FROM USER WHERE (USERID = ?);
2014-01-10 13:43:28,565   INFO  [main] COMPILER: [USER.update]: Compiling Statement: UPDATE USER SET USERID = ?, USERNAME = ?, USEREMAIL = ?, USERPWHASH = ? WHERE (USERID = ?);
2014-01-10 13:43:28,604   INFO  [main] COMPILER: [FindAllChecks.class]: Compiling Statement: SELECT * FROM CHECK;
2014-01-10 13:43:28,608   WARN  [main] COMPILER: [FindAllChecks.class]: Procedure FindAllChecks has a statement with a non-deterministic result - statement: "SELECT * FROM CHECK;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,609   INFO  [main] COMPILER: [Insert.class]: Compiling Statement: INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:28,612   INFO  [main] COMPILER: [Insert.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 2 of statement 'INSERT INTO LOGQUEUE VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:43:28,613   INFO  [main] COMPILER: [FindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:43:28,616   WARN  [main] COMPILER: [FindAllMultichecksForCheck.class]: Procedure FindAllMultichecksForCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,616   INFO  [main] COMPILER: [UI_SelectAllProperties.class]: Compiling Statement: SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;
2014-01-10 13:43:28,620   WARN  [main] COMPILER: [UI_SelectAllProperties.class]: Procedure UI_SelectAllProperties has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTY ORDER BY PROPERTYNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,620   INFO  [main] COMPILER: [UI_SelectPropertyNameForPropertyID.class]: Compiling Statement: select propertyname from property where propertyid = ?;
2014-01-10 13:43:28,622   INFO  [main] COMPILER: [AME_DetailsForAction.class]: Compiling Statement: SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;
2014-01-10 13:43:28,629   WARN  [main] COMPILER: [AME_DetailsForAction.class]: Procedure AME_DetailsForAction has a statement with a non-deterministic result - statement: "SELECT ACTION.ACTIONID, ACTION.TARGETENDPOINTID, ACTION.TGTEPIDFROMINBOUNDPROP, OUTBOUNDPROPERTYACTION.OUTBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.INBOUNDPROPERTYID, OUTBOUNDPROPERTYACTION.CURRENTSTATEPROPERTYID, OUTBOUNDPROPERTYACTION.CUSTOMPAYLOAD FROM ACTION INNER JOIN OUTBOUNDPROPERTYACTION ON ACTION.ACTIONID = OUTBOUNDPROPERTYACTION.ACTIONID AND OUTBOUNDPROPERTYACTION.ACTIONID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,629   INFO  [main] COMPILER: [FindRulesForCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE CHECKID = ?;
2014-01-10 13:43:28,631   WARN  [main] COMPILER: [FindRulesForCheckID.class]: Procedure FindRulesForCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,632   INFO  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Compiling Statement: select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;
2014-01-10 13:43:28,659   WARN  [main] COMPILER: [UI_SelectChecksForEndpoint.class]: Procedure UI_SelectChecksForEndpoint has a statement with a non-deterministic result - statement: "select * from check join property on check.propertyid = property.propertyid and check.endpointid = ? ORDER BY name;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,660   INFO  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Compiling Statement: SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:43:28,662   WARN  [main] COMPILER: [UI_SelectAllEndpointClasses.class]: Procedure UI_SelectAllEndpointClasses has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINTCLASS ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,663   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyClassID.class]: Compiling Statement: select propertyclassid, propertyclassdatatype, propertyclassname, propertyclassunit from propertyclass where propertyclassid = ?;
2014-01-10 13:43:28,665   INFO  [main] COMPILER: [UI_DeleteMulticheckMulticheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:43:28,668   INFO  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:43:28,670   WARN  [main] COMPILER: [BLE_MultiCheckParentForMultiCheck.class]: Procedure BLE_MultiCheckParentForMultiCheck has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,671   INFO  [main] COMPILER: [SelectAllUsers.class]: Compiling Statement: SELECT * FROM USER ORDER BY USERNAME;
2014-01-10 13:43:28,672   WARN  [main] COMPILER: [SelectAllUsers.class]: Procedure SelectAllUsers has a statement with a non-deterministic result - statement: "SELECT * FROM USER ORDER BY USERNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,673   INFO  [main] COMPILER: [UI_SelectPropertyClassForPropertyID.class]: Compiling Statement: select propertyclassid from property where propertyid = ?;
2014-01-10 13:43:28,675   INFO  [main] COMPILER: [SelectAllLogEntries.class]: Compiling Statement: SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;
2014-01-10 13:43:28,682   WARN  [main] COMPILER: [SelectAllLogEntries.class]: Procedure SelectAllLogEntries has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE ORDER BY IDENTIFIER;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,683   INFO  [main] COMPILER: [UI_UpdateCheck.class]: Compiling Statement: UPDATE CHECK SET NAME = ?, CHECKVALUE = ?, OPERATOR = ?, STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:43:28,687   INFO  [main] COMPILER: [UI_SelectAllEndpoints.class]: Compiling Statement: SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;
2014-01-10 13:43:28,688   WARN  [main] COMPILER: [UI_SelectAllEndpoints.class]: Procedure UI_SelectAllEndpoints has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,689   INFO  [main] COMPILER: [FindMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKID, STATE, OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,691   INFO  [main] COMPILER: [UI_UpdateMulticheck.class]: Compiling Statement: UPDATE MULTICHECK SET MULTICHECKNAME = ?, OPERATOR = ? WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,694   INFO  [main] COMPILER: [Select.class]: Compiling Statement: SELECT * FROM LOGQUEUE
2014-01-10 13:43:28,696   WARN  [main] COMPILER: [Select.class]: Procedure Select has a statement with a non-deterministic result - statement: "SELECT * FROM LOGQUEUE", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,696   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: Compiling Statement: UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;
2014-01-10 13:43:28,698   INFO  [main] COMPILER: [UI_UpdateSpherenameForSphereID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE SPHERE SET SPHERENAME = ? WHERE SPHEREID = ?;'
2014-01-10 13:43:28,699   INFO  [main] COMPILER: [UI_SelectCheckForCheckID.class]: Compiling Statement: select checkid, name from check where checkid = ?;
2014-01-10 13:43:28,702   INFO  [main] COMPILER: [FindRulesForMultiCheckID.class]: Compiling Statement: SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,704   WARN  [main] COMPILER: [FindRulesForMultiCheckID.class]: Procedure FindRulesForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT RULEID FROM RULE WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,705   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;
2014-01-10 13:43:28,708   INFO  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE ENDPOINTID = ? AND PROPERTYID = ? AND CHECKVALUE = ? AND OPERATOR = ? AND EXPIRED = ?;
2014-01-10 13:43:28,711   WARN  [main] COMPILER: [ImprovedFindMatchingChecksEqual.class]: Procedure ImprovedFindMatchingChecksEqual is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT * FROM CHECK WHERE STATE = 1 AND ENDPOINTID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,712   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: Compiling Statement: UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;
2014-01-10 13:43:28,713   INFO  [main] COMPILER: [UI_UpdateCheckpathName.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET CHECKPATHNAME = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:43:28,714   INFO  [main] COMPILER: [UpdateMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?
2014-01-10 13:43:28,716   INFO  [main] COMPILER: [AME_ActionsForRule.class]: Compiling Statement: SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;
2014-01-10 13:43:28,718   INFO  [main] COMPILER: [AME_ActionsForRule.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement 'SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;'
2014-01-10 13:43:28,718   WARN  [main] COMPILER: [AME_ActionsForRule.class]: Procedure AME_ActionsForRule has a statement with a non-deterministic result - statement: "SELECT ACTIONID FROM RULE_ACTION_LINK WHERE RULEID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,719   INFO  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:43:28,747   WARN  [main] COMPILER: [UI_SelectActPropertiesForEndpoint.class]: Procedure UI_SelectActPropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.act = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,748   INFO  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;
2014-01-10 13:43:28,751   WARN  [main] COMPILER: [UI_SelectEndpointsForUser.class]: Procedure UI_SelectEndpointsForUser has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_USER_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_USER_LINK.ENDPOINTID AND ENDPOINT_USER_LINK.USERID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,752   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:43:28,755   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,757   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID, STATE FROM MULTICHECK WHERE MULTICHECKID = ?
2014-01-10 13:43:28,760   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:43:28,762   INFO  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,765   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,765   WARN  [main] COMPILER: [BLE_IsCycleMultiCheckTrue.class]: Procedure BLE_IsCycleMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,765   INFO  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;
2014-01-10 13:43:28,768   WARN  [main] COMPILER: [FindParentMultiChecksForMultiCheckID.class]: Procedure FindParentMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKLID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKRID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,768   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Compiling Statement: SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;
2014-01-10 13:43:28,772   INFO  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;'
2014-01-10 13:43:28,772   WARN  [main] COMPILER: [UI_LastLogEntryForEndpointProperty.class]: Procedure UI_LastLogEntryForEndpointProperty has a statement with a non-deterministic result - statement: "SELECT TOP 1 ENDPOINTID, PROPERTYID, PROPERTYENTRY, TIME_STAMP FROM ENDPOINTPROPERTYLOG WHERE ENDPOINTID = ? AND  PROPERTYID = ? ORDER BY TIME_STAMP DESC;" , reason: insufficient ordering criteria.
2014-01-10 13:43:28,773   INFO  [main] COMPILER: [BLE_CheckPathForChecks.class]: Compiling Statement: SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:43:28,774   WARN  [main] COMPILER: [BLE_CheckPathForChecks.class]: Procedure BLE_CheckPathForChecks has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKID FROM CHECKPATH_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,775   INFO  [main] COMPILER: [UI_UpdateEndpointnameForEndpointID.class]: Compiling Statement: UPDATE ENDPOINT SET ENDPOINTNAME = ? WHERE ENDPOINTID = ?;
2014-01-10 13:43:28,777   INFO  [main] COMPILER: [UI_DeleteEndpointFromSphere.class]: Compiling Statement: DELETE FROM ENDPOINT_SPHERE_LINK WHERE ENDPOINTID = ? AND SPHEREID = ?;
2014-01-10 13:43:28,780   INFO  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Compiling Statement: SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;
2014-01-10 13:43:28,783   WARN  [main] COMPILER: [UI_SelectAllCheckpaths.class]: Procedure UI_SelectAllCheckpaths has a statement with a non-deterministic result - statement: "SELECT CHECKPATHID, CHECKPATHNAME FROM CHECKPATH ORDER BY CHECKPATHNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,783   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: Compiling Statement: select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;
2014-01-10 13:43:28,785   INFO  [main] COMPILER: [UI_SelectCheckpathForCheckpathID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' select checkpathid, checkpathname, uiobject from checkpath where checkpathid = ?;'
2014-01-10 13:43:28,786   INFO  [main] COMPILER: [UI_FindUserForEmail.class]: Compiling Statement: SELECT * FROM USER WHERE USEREMAIL = ?;
2014-01-10 13:43:28,788   WARN  [main] COMPILER: [UI_FindUserForEmail.class]: Procedure UI_FindUserForEmail has a statement with a non-deterministic result - statement: "SELECT * FROM USER WHERE USEREMAIL = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,788   INFO  [main] COMPILER: [UI_SelectAllSpheres.class]: Compiling Statement: SELECT * FROM SPHERE ORDER BY SPHERENAME;
2014-01-10 13:43:28,790   WARN  [main] COMPILER: [UI_SelectAllSpheres.class]: Procedure UI_SelectAllSpheres has a statement with a non-deterministic result - statement: "SELECT * FROM SPHERE ORDER BY SPHERENAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,791   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;
2014-01-10 13:43:28,794   INFO  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?
2014-01-10 13:43:28,797   WARN  [main] COMPILER: [ImprovedFindAllMultichecksForCheck.class]: Procedure ImprovedFindAllMultichecksForCheck is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK_CHECK_LINK WHERE CHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,797   INFO  [main] COMPILER: [UpdateChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = ? WHERE CHECKID = ?
2014-01-10 13:43:28,800   INFO  [main] COMPILER: [UI_DeleteMulticheckCheckLink.class]: Compiling Statement: DELETE FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,803   INFO  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Compiling Statement: SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;
2014-01-10 13:43:28,806   WARN  [main] COMPILER: [UI_SelectAllPropertyClasses.class]: Procedure UI_SelectAllPropertyClasses has a statement with a non-deterministic result - statement: "SELECT * FROM PROPERTYCLASS ORDER BY PROPERTYCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,807   INFO  [main] COMPILER: [BLE_AllChecksForExpression.class]: Compiling Statement: SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;
2014-01-10 13:43:28,810   WARN  [main] COMPILER: [BLE_AllChecksForExpression.class]: Procedure BLE_AllChecksForExpression has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,811   INFO  [main] COMPILER: [FindChecksForMultiCheckID.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,813   WARN  [main] COMPILER: [FindChecksForMultiCheckID.class]: Procedure FindChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,814   INFO  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Compiling Statement: SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;
2014-01-10 13:43:28,816   WARN  [main] COMPILER: [FindLinkedMultiChecksForMultiCheckID.class]: Procedure FindLinkedMultiChecksForMultiCheckID has a statement with a non-deterministic result - statement: "SELECT MULTICHECKRID FROM MULTICHECK_MULTICHECK_LINK WHERE MULTICHECKLID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,817   INFO  [main] COMPILER: [FindChecksForCheckID.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:43:28,820   INFO  [main] COMPILER: [UI_DeleteCheck.class]: Compiling Statement: DELETE FROM CHECK WHERE CHECKID = ?;
2014-01-10 13:43:28,823   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = 0 WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,825   INFO  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Compiling Statement: SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;
2014-01-10 13:43:28,827   WARN  [main] COMPILER: [BLE_CheckPathForMultiChecks.class]: Procedure BLE_CheckPathForMultiChecks is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKPATHID, MULTICHECKID FROM MULTICHECK WHERE CHECKPATHID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,827   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE CHECKID = ?;
2014-01-10 13:43:28,833   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: UPDATE CHECK SET STATE = 1 WHERE CHECKID = ?;
2014-01-10 13:43:28,835   INFO  [main] COMPILER: [BLE_ChecksForExpression.class]: Compiling Statement: SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;
2014-01-10 13:43:28,838   WARN  [main] COMPILER: [BLE_ChecksForExpression.class]: Procedure BLE_ChecksForExpression is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID, OPERATOR, CHECKVALUE, CHECKPATHID FROM CHECK WHERE ENDPOINTID = ? AND PROPERTYID = ? AND EXPIRED = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,839   INFO  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Compiling Statement: select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;
2014-01-10 13:43:28,865   WARN  [main] COMPILER: [UI_SelectSensePropertiesForEndpoint.class]: Procedure UI_SelectSensePropertiesForEndpoint has a statement with a non-deterministic result - statement: "select * from endpoint, property, endpointclass where endpoint.endpointclassid = property.endpointclassid and endpointclass.endpointclassid = property.endpointclassid and endpoint.endpointid = ? and property.sense = 1 ORDER BY endpoint.endpointname;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,866   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: Compiling Statement: INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);
2014-01-10 13:43:28,868   INFO  [main] COMPILER: [LGE_InsertEndpointPropertyLog.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement 'INSERT INTO ENDPOINTPROPERTYLOG VALUES (?, ?, ?, ?, ?);'
2014-01-10 13:43:28,869   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,871   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: UPDATE MULTICHECK SET STATE = ? WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,873   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;
2014-01-10 13:43:28,875   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT CHECKID, STATE FROM CHECK WHERE CHECKID = ?
2014-01-10 13:43:28,877   INFO  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Compiling Statement: SELECT OPERATOR FROM MULTICHECK WHERE MULTICHECKID = ?;
2014-01-10 13:43:28,880   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT CHECKID FROM MULTICHECK_CHECK_LINK WHERE MULTICHECKID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,880   WARN  [main] COMPILER: [BLE_IsMultiCheckTrue.class]: Procedure BLE_IsMultiCheckTrue is RW and has a statement whose result has a non-deterministic ordering - statement: "SELECT MULTICHECKID FROM MULTICHECK WHERE MULTICHECKID = ? AND STATE = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,881   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: Compiling Statement: UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;
2014-01-10 13:43:28,885   INFO  [main] COMPILER: [UI_UpdateCheckpath.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 1 of statement ' UPDATE CHECKPATH SET UIOBJECT = ? WHERE CHECKPATHID = ?;'
2014-01-10 13:43:28,885   INFO  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Compiling Statement: SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;
2014-01-10 13:43:28,888   WARN  [main] COMPILER: [UI_SelectEndpointForEndpointID.class]: Procedure UI_SelectEndpointForEndpointID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTID, ENDPOINTNAME, ENDPOINTCLASSID FROM ENDPOINT WHERE ENDPOINTID = ? ORDER BY ENDPOINTNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,888   INFO  [main] COMPILER: [ResetChecks.class]: Compiling Statement: UPDATE CHECK SET STATE = 0 WHERE ENDPOINTID = ?
2014-01-10 13:43:28,891   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Compiling Statement: SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;
2014-01-10 13:43:28,893   INFO  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: This procedure might benefit from an @ProcInfo annotation designating parameter 0 of statement ' SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;'
2014-01-10 13:43:28,893   WARN  [main] COMPILER: [UI_SelectEndpointClassForEndpointClassID.class]: Procedure UI_SelectEndpointClassForEndpointClassID has a statement with a non-deterministic result - statement: "SELECT ENDPOINTCLASSID, ENDPOINTCLASSNAME FROM ENDPOINTCLASS WHERE ENDPOINTCLASSID = ? ORDER BY ENDPOINTCLASSNAME;", reason: insufficient ordering criteria.
2014-01-10 13:43:28,894   INFO  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Compiling Statement: SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;
2014-01-10 13:43:28,898   WARN  [main] COMPILER: [UI_SelectEndpointsForSphere.class]: Procedure UI_SelectEndpointsForSphere has a statement with a non-deterministic result - statement: "SELECT * FROM ENDPOINT JOIN ENDPOINT_SPHERE_LINK ON ENDPOINT.ENDPOINTID = ENDPOINT_SPHERE_LINK.ENDPOINTID AND ENDPOINT_SPHERE_LINK.SPHEREID = ?;", reason: the query result does not guarantee a consistent ordering
2014-01-10 13:43:28,899   INFO  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Compiling Statement: select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;
2014-01-10 13:43:28,906   WARN  [main] COMPILER: [UI_SelectPropertyDetailsForEndpointClass.class]: Procedure UI_SelectPropertyDetailsForEndpointClass has a statement with a non-deterministic result - statement: "select * from property join propertyclass on property.propertyclassid = propertyclass.propertyclassid and property.endpointclassid = ? ORDER BY propertyname;", reason: insufficient ordering criteria.
2014-01-10 21:43:30,123   INFO  [main] CONSOLE: Initializing VoltDB...

 _    __      ____  ____  ____ 
| |  / /___  / / /_/ __ \/ __ )
| | / / __ \/ / __/ / / / __  |
| |/ / /_/ / / /_/ /_/ / /_/ / 
|___/\____/_/\__/_____/_____/

--------------------------------

2014-01-10 21:43:30,133   INFO  [main] CONSOLE: Build: 3.0 voltdb-3.0-0-g77209f0 Community Edition
2014-01-10 21:43:30,139   INFO  [main] NETWORK: Default network thread count: 2
2014-01-10 21:43:30,166   INFO  [main] HOST: Beginning inter-node communication on port 3021.
2014-01-10 21:43:30,166   INFO  [main] HOST: Attempting to bind to leader ip localhost/127.0.0.1:3021
2014-01-10 21:43:30,168   INFO  [main] CONSOLE: Connecting to VoltDB cluster as the leader...
2014-01-10 21:43:30,195   INFO  [main] ZK-SERVER: binding to port /127.0.0.1:2181
2014-01-10 21:43:30,203   INFO  [main] ZK-SERVER: Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000
2014-01-10 21:43:30,235   INFO  [main] ZK-SERVER: Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=2000 watcher=org.voltcore.zk.ZKUtil$1@421fbfd6
2014-01-10 21:43:30,239   INFO  [main-SendThread()] ZK-CLIENT: Opening socket connection to server /127.0.0.1:2181
2014-01-10 21:43:30,241   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Accepted socket connection from /127.0.0.1:60334
2014-01-10 21:43:30,242   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Socket connection established to localhost/127.0.0.1:2181, initiating session
2014-01-10 21:43:30,243   INFO  [NIOServerCxn.Factory:/127.0.0.1:2181] ZK-SERVER: Client attempting to establish new session at /127.0.0.1:60334
2014-01-10 21:43:30,256   INFO  [ZooKeeperServer] ZK-SERVER: Established session 0x1625bb3062000000 with negotiated timeout 6000 for client /127.0.0.1:60334
2014-01-10 21:43:30,258   INFO  [main-SendThread(localhost:2181)] ZK-CLIENT: Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x1625bb3062000000, negotiated timeout = 6000
2014-01-10 21:43:30,307   INFO  [Socket Joiner] HOST: Attempting to bind to internal ip 0.0.0.0/0.0.0.0:3021
2014-01-10 21:43:30,345   INFO  [main] HOST: URL of deployment info: deployment.xml
2014-01-10 21:43:30,537   INFO  [main] HOST: Cluster has 1 hosts with leader hostname: "localhost". 3 sites per host. K = 0.
2014-01-10 21:43:30,537   INFO  [main] HOST: The entire cluster has 1 copy of each of the 3 logical partitions.
2014-01-10 21:43:30,537   INFO  [main] HOST: Detection of network partitions in the cluster is enabled.
2014-01-10 21:43:30,537   INFO  [main] HOST: Using "/home/voltdb/git/velimontana/VeliSphere Montana/voltdbroot" for voltdbroot directory.
2014-01-10 21:43:30,712   INFO  [main] HOST: hsql loaded
2014-01-10 21:43:30,805   INFO  [main] HOST: Registering stats mailbox id 0:-2
2014-01-10 21:43:32,623   INFO  [main] HOST: hsql loaded
2014-01-10 21:43:32,627   INFO  [main] EXPORT: System is not using any export functionality.
2014-01-10 21:43:32,680   INFO  [Iv2ExecutionSite: 0:0] HOST: Loading native VoltDB code (voltdb-3.0). A confirmation message will follow if the loading is successful.
2014-01-10 21:43:32,680   INFO  [Iv2ExecutionSite: 0:0] HOST: Successfully loaded native VoltDB library voltdb-3.0.
2014-01-10 21:43:32,826   INFO  [Leader elector-/db/leaders/globalservice] HOST: Host 0 promoted to be the global service provider
2014-01-10 21:43:32,875   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:0 as leader for partition 0
2014-01-10 21:43:32,902   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:1 as leader for partition 1
2014-01-10 21:43:32,910   INFO  [LeaderCache] TM: SP 0:0 for partition 0 found (including self) 1 surviving replicas to repair.  Survivors: 0:0
2014-01-10 21:43:32,910   INFO  [LeaderCache] TM: SP 0:0 for partition 0 finished leader promotion. Took 14 ms.
2014-01-10 21:43:32,922   INFO  [LeaderAppointer-Babysitters] TM: Appointing HSId 0:2 as leader for partition 2
2014-01-10 21:43:32,925   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:32,934   INFO  [LeaderCache] TM: SP 0:1 for partition 1 found (including self) 1 surviving replicas to repair.  Survivors: 0:1
2014-01-10 21:43:32,934   INFO  [LeaderCache] TM: SP 0:1 for partition 1 finished leader promotion. Took 12 ms.
2014-01-10 21:43:32,960   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:32,964   INFO  [LeaderCache] TM: SP 0:2 for partition 2 found (including self) 1 surviving replicas to repair.  Survivors: 0:2
2014-01-10 21:43:32,964   INFO  [LeaderCache] TM: SP 0:2 for partition 2 finished leader promotion. Took 11 ms.
2014-01-10 21:43:32,999   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:33,030   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 found 3 surviving leaders to repair.  Survivors: 0:0, 0:1, 0:2
2014-01-10 21:43:33,030   INFO  [LeaderCache] TM: MP 0:3 for partition 16383 finished leader promotion. Took 24 ms.
2014-01-10 21:43:33,044   INFO  [LeaderCache] HOST: Mailbox is not registered for site id -4
2014-01-10 21:43:33,046   INFO  [main] CONSOLE: Initializing initiator ID: 0, SiteID: 0:7
2014-01-10 21:43:33,085   INFO  [Mailbox tracker] EXPORT: Attempting to boot export client due to rejoin or other cluster topology change
2014-01-10 21:43:33,101   INFO  [main] HOST: Database start action is Create.
2014-01-10 21:43:33,101   INFO  [main] HOST: Listening for native wire protocol clients on port 21212.
2014-01-10 21:43:33,101   INFO  [main] HOST: Listening for admin wire protocol clients on port 21211.
2014-01-10 21:43:33,101   INFO  [main] HOST: Local machine HTTP monitoring is listening on port 8080.
2014-01-10 21:43:33,101   INFO  [main] HOST: Json API over HTTP enabled at path /api/1.0/, listening on port 8080.
2014-01-10 21:43:33,101   INFO  [main] HOST: Available JVM arguments: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -XX:-ReduceInitialCardMarks -Xmx1024m -Dlog4j.configuration=file:///home/voltdb/voltdb-3.0/voltdb/log4j.xml -Djava.library.path=/home/voltdb/voltdb-3.0/voltdb
2014-01-10 21:43:33,101   INFO  [main] HOST: JVM class path: /home/voltdb/voltdb-3.0/voltdb/voltdb-3.0.jar:/home/voltdb/voltdb-3.0/lib/commons-cli-1.2.jar:/home/voltdb/voltdb-3.0/lib/commons-lang3-3.0.jar:/home/voltdb/voltdb-3.0/lib/guava-12.0.jar:/home/voltdb/voltdb-3.0/lib/jetty-continuation-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-http-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-io-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-server-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jetty-util-7.6.1.v20120215.jar:/home/voltdb/voltdb-3.0/lib/jline-2.10.jar:/home/voltdb/voltdb-3.0/lib/jna.jar:/home/voltdb/voltdb-3.0/lib/jsch-0.1.48.jar:/home/voltdb/voltdb-3.0/lib/log4j-1.2.16.jar:/home/voltdb/voltdb-3.0/lib/protobuf-java-2.4.1.jar:/home/voltdb/voltdb-3.0/lib/servlet-api-2.5.jar:/home/voltdb/voltdb-3.0/lib/slf4j-api-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/slf4j-nop-1.6.2.jar:/home/voltdb/voltdb-3.0/lib/snappy-java-1.0.5-M3.jar:/home/voltdb/voltdb-3.0/lib/zmq-2.1.11.jar
2014-01-10 21:43:33,102   INFO  [main] HOST: Maximum usable Java heap set to 910 mb.
2014-01-10 21:43:33,102   INFO  [main] HOST: Client authentication is not enabled. Anonymous clients accepted.
2014-01-10 21:43:33,102   INFO  [main] HOST: No schedule set for automated snapshots.
2014-01-10 21:43:33,102   INFO  [main] HOST: CPU INFO:         2 Cores (Reported by Java), -1 Sockets, 2 Hardware Threads
2014-01-10 21:43:33,102   INFO  [main] HOST: CPU DESC:         Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 6144 KB cache
2014-01-10 21:43:33,102   INFO  [main] HOST: HOST MEMORY (MB): 2002
2014-01-10 21:43:33,102   INFO  [main] HOST: OS PROFILE:       Linux 3.2.0-36-generic amd64 en_US
2014-01-10 21:43:33,102   INFO  [main] HOST: JAVA VERSION:     1.6.0_24
2014-01-10 21:43:33,102   INFO  [main] HOST: JAVA RUNTIME:     OpenJDK Runtime Environment (1.6.0_24-b24)
2014-01-10 21:43:33,102   INFO  [main] HOST: JAVA VM:          OpenJDK 64-Bit Server VM (20.0-b12, mixed mode)
2014-01-10 21:43:33,103   INFO  [main] HOST: About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port
2014-01-10 21:43:33,103   INFO  [main] HOST:   Host id: 0 with interfaces: 16.1.1.149 2a02:8070:8333:b700:20c:29ff:feba:12f0%2 21212,21211,8080 [SELF]
2014-01-10 21:43:33,120   WARN  [main] HOST: Running without redundancy (k=0) is not recommended for production use.
2014-01-10 21:43:33,157   INFO  [SnapshotDaemon] LOGGING: This node was selected as the leader for snapshot truncation
2014-01-10 21:43:33,691   INFO  [Thread-10] CONSOLE: Server completed initialization.
